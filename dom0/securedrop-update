#!/bin/bash
# Utility for dom- to ensure all updates are regularly installed
set -e
set -u

# Number of VMs to update in parallel. Default is 4,
# which can be memory-intensive.
SECUREDROP_MAX_CONCURRENCY=2


# Ensure elevated privileges
if [[ "$EUID" -ne 0 ]]; then
    echo "Script must be run as root! Exiting..."
    exit 1
fi

# Display GUI feedback about update process
function securedrop-update-feedback() {
    # Unpack msg as arg1
    local msg="$1"
    shift

    # Running `notify-send` as root doesn't work, must be normal user.
    # Setting 60s expire time (in ms) since it's a long-running cmd.
    local qubes_user
    qubes_user="$(id -nu 1000)"
    su "$qubes_user" -c "notify-send \
        --app-name 'SecureDrop Workstation' \
        --icon /usr/share/securedrop/icons/sd-logo.png \
        --expire-time 60000 \
        'SecureDrop: $msg'"
}

function get_sdw_target_vms() {
    qvm-ls --tags sd-workstation-updates --raw-data --fields NAME,CLASS \
        | perl -F'\|' -lanE 'say $F[0] if $F[1] eq "TemplateVM"' \
        | perl -npE 's/\n/,/g' \
        | perl -npE 's/,$//'
}

securedrop-update-feedback "Updating dom0 configuration..."

# Install latest RPMs inside dom0
qubesctl state.sls update.qubes-dom0

# Configure VM state (network settings, RPC policies)
securedrop-update-feedback "Updating VM configuration..."
qubesctl state.highstate

securedrop-update-feedback "Installing updates for VM applications..."

qubesctl --skip-dom0 --targets fedora-30 state.sls update.qubes-vm

# Format list of all VMs comma-separated, for use as qubesctl target
sdw_target_vms="$(get_sdw_target_vms)"

# Use the Qubes-provided "update.qubes-vm" state to upgrade packages
# Update all SDW templates.
qubesctl --skip-dom0 \
    --max-concurrency "$SECUREDROP_MAX_CONCURRENCY" \
    --targets "$sdw_target_vms" \
    state.sls update.qubes-vm

securedrop-update-feedback \
    "Updates installed. Please reboot the workstation \
to ensure the latest security fixes are applied."
